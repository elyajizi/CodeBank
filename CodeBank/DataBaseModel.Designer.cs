//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 4/15/2014 12:01:59 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace MainContext
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class MainDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(MainDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertKategoriler(Kategoriler instance);
        partial void UpdateKategoriler(Kategoriler instance);
        partial void DeleteKategoriler(Kategoriler instance);
        partial void InsertAltKategori(AltKategori instance);
        partial void UpdateAltKategori(AltKategori instance);
        partial void DeleteAltKategori(AltKategori instance);
        partial void InsertKodlar(Kodlar instance);
        partial void UpdateKodlar(Kodlar instance);
        partial void DeleteKodlar(Kodlar instance);
        partial void InsertOzellikler(Ozellikler instance);
        partial void UpdateOzellikler(Ozellikler instance);
        partial void DeleteOzellikler(Ozellikler instance);

        #endregion

        public MainDataContext() :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public MainDataContext(MappingSource mappingSource) :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public MainDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Kategoriler> Kategorilers
        {
            get
            {
                return this.GetTable<Kategoriler>();
            }
        }

        public Devart.Data.Linq.Table<AltKategori> AltKategoris
        {
            get
            {
                return this.GetTable<AltKategori>();
            }
        }

        public Devart.Data.Linq.Table<Kodlar> Kodlars
        {
            get
            {
                return this.GetTable<Kodlar>();
            }
        }

        public Devart.Data.Linq.Table<Ozellikler> Ozelliklers
        {
            get
            {
                return this.GetTable<Ozellikler>();
            }
        }
    }
}

namespace MainContext
{

    /// <summary>
    /// There are no comments for MainContext.Kategoriler in the schema.
    /// </summary>
    [Table(Name = @"""main"".Kategoriler")]
    public partial class Kategoriler : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _Ad;
        #pragma warning restore 0649

        private EntitySet<AltKategori> _AltKategoris;

        private EntitySet<Kodlar> _Kodlars;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnAdChanging(string value);
        partial void OnAdChanged();
        #endregion

        public Kategoriler()
        {
            this._AltKategoris = new EntitySet<AltKategori>(new Action<AltKategori>(this.attach_AltKategoris), new Action<AltKategori>(this.detach_AltKategoris));
            this._Kodlars = new EntitySet<Kodlar>(new Action<Kodlar>(this.attach_Kodlars), new Action<Kodlar>(this.detach_Kodlars));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ad in the schema.
        /// </summary>
        [Column(Storage = "_Ad", CanBeNull = false, DbType = "NCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ad
        {
            get
            {
                return this._Ad;
            }
            set
            {
                if (this._Ad != value)
                {
                    this.OnAdChanging(value);
                    this.SendPropertyChanging();
                    this._Ad = value;
                    this.SendPropertyChanged("Ad");
                    this.OnAdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AltKategoris in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Kategoriler_AltKategori", Storage="_AltKategoris", ThisKey="ID", OtherKey="Kategori", DeleteRule="CASCADE")]
        public EntitySet<AltKategori> AltKategoris
        {
            get
            {
                return this._AltKategoris;
            }
            set
            {
                this._AltKategoris.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Kodlars in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Kategoriler_Kodlar", Storage="_Kodlars", ThisKey="ID", OtherKey="Kategori", DeleteRule="CASCADE")]
        public EntitySet<Kodlar> Kodlars
        {
            get
            {
                return this._Kodlars;
            }
            set
            {
                this._Kodlars.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_AltKategoris(AltKategori entity)
        {
            this.SendPropertyChanging("AltKategoris");
            entity.Kategoriler = this;
        }
    
        private void detach_AltKategoris(AltKategori entity)
        {
            this.SendPropertyChanging("AltKategoris");
            entity.Kategoriler = null;
        }

        private void attach_Kodlars(Kodlar entity)
        {
            this.SendPropertyChanging("Kodlars");
            entity.Kategoriler = this;
        }
    
        private void detach_Kodlars(Kodlar entity)
        {
            this.SendPropertyChanging("Kodlars");
            entity.Kategoriler = null;
        }
    }

    /// <summary>
    /// There are no comments for MainContext.AltKategori in the schema.
    /// </summary>
    [Table(Name = @"""main"".AltKategori")]
    public partial class AltKategori : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private int _Kategori;

        private string _Ad;
        #pragma warning restore 0649

        private EntityRef<Kategoriler> _Kategoriler;

        private EntitySet<Kodlar> _Kodlars;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnKategoriChanging(int value);
        partial void OnKategoriChanged();
        partial void OnAdChanging(string value);
        partial void OnAdChanged();
        #endregion

        public AltKategori()
        {
            this._Kategoriler  = default(EntityRef<Kategoriler>);
            this._Kodlars = new EntitySet<Kodlar>(new Action<Kodlar>(this.attach_Kodlars), new Action<Kodlar>(this.detach_Kodlars));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Kategori in the schema.
        /// </summary>
        [Column(Storage = "_Kategori", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Kategori
        {
            get
            {
                return this._Kategori;
            }
            set
            {
                if (this._Kategori != value)
                {
                    if (this._Kategoriler.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnKategoriChanging(value);
                    this.SendPropertyChanging();
                    this._Kategori = value;
                    this.SendPropertyChanged("Kategori");
                    this.OnKategoriChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ad in the schema.
        /// </summary>
        [Column(Storage = "_Ad", CanBeNull = false, DbType = "NCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ad
        {
            get
            {
                return this._Ad;
            }
            set
            {
                if (this._Ad != value)
                {
                    this.OnAdChanging(value);
                    this.SendPropertyChanging();
                    this._Ad = value;
                    this.SendPropertyChanged("Ad");
                    this.OnAdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Kategoriler in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Kategoriler_AltKategori", Storage="_Kategoriler", ThisKey="Kategori", OtherKey="ID", IsForeignKey=true)]
        public Kategoriler Kategoriler
        {
            get
            {
                return this._Kategoriler.Entity;
            }
            set
            {
                Kategoriler previousValue = this._Kategoriler.Entity;
                if ((previousValue != value) || (this._Kategoriler.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Kategoriler.Entity = null;
                        previousValue.AltKategoris.Remove(this);
                    }
                    this._Kategoriler.Entity = value;
                    if (value != null)
                    {
                        this._Kategori = value.ID;
                        value.AltKategoris.Add(this);
                    }
                    else
                    {
                        this._Kategori = default(int);
                    }
                    this.SendPropertyChanged("Kategoriler");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Kodlars in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="AltKategori_Kodlar", Storage="_Kodlars", ThisKey="ID", OtherKey="AltKategori", DeleteRule="CASCADE")]
        public EntitySet<Kodlar> Kodlars
        {
            get
            {
                return this._Kodlars;
            }
            set
            {
                this._Kodlars.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Kodlars(Kodlar entity)
        {
            this.SendPropertyChanging("Kodlars");
            entity.AltKategori1 = this;
        }
    
        private void detach_Kodlars(Kodlar entity)
        {
            this.SendPropertyChanging("Kodlars");
            entity.AltKategori1 = null;
        }
    }

    /// <summary>
    /// There are no comments for MainContext.Kodlar in the schema.
    /// </summary>
    [Table(Name = @"""main"".Kodlar")]
    public partial class Kodlar : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private int _Kategori;

        private int _AltKategori;

        private string _Baslik;

        private string _Kod;
        #pragma warning restore 0649

        private EntityRef<Kategoriler> _Kategoriler;

        private EntityRef<AltKategori> _AltKategori1;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnKategoriChanging(int value);
        partial void OnKategoriChanged();
        partial void OnAltKategoriChanging(int value);
        partial void OnAltKategoriChanged();
        partial void OnBaslikChanging(string value);
        partial void OnBaslikChanged();
        partial void OnKodChanging(string value);
        partial void OnKodChanged();
        #endregion

        public Kodlar()
        {
            this._Kategoriler  = default(EntityRef<Kategoriler>);
            this._AltKategori1  = default(EntityRef<AltKategori>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Kategori in the schema.
        /// </summary>
        [Column(Storage = "_Kategori", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Kategori
        {
            get
            {
                return this._Kategori;
            }
            set
            {
                if (this._Kategori != value)
                {
                    if (this._Kategoriler.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnKategoriChanging(value);
                    this.SendPropertyChanging();
                    this._Kategori = value;
                    this.SendPropertyChanged("Kategori");
                    this.OnKategoriChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AltKategori in the schema.
        /// </summary>
        [Column(Storage = "_AltKategori", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AltKategori
        {
            get
            {
                return this._AltKategori;
            }
            set
            {
                if (this._AltKategori != value)
                {
                    if (this._AltKategori1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAltKategoriChanging(value);
                    this.SendPropertyChanging();
                    this._AltKategori = value;
                    this.SendPropertyChanged("AltKategori");
                    this.OnAltKategoriChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Baslik in the schema.
        /// </summary>
        [Column(Storage = "_Baslik", CanBeNull = false, DbType = "NCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Baslik
        {
            get
            {
                return this._Baslik;
            }
            set
            {
                if (this._Baslik != value)
                {
                    this.OnBaslikChanging(value);
                    this.SendPropertyChanging();
                    this._Baslik = value;
                    this.SendPropertyChanged("Baslik");
                    this.OnBaslikChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Kod in the schema.
        /// </summary>
        [Column(Storage = "_Kod", CanBeNull = false, DbType = "NCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Kod
        {
            get
            {
                return this._Kod;
            }
            set
            {
                if (this._Kod != value)
                {
                    this.OnKodChanging(value);
                    this.SendPropertyChanging();
                    this._Kod = value;
                    this.SendPropertyChanged("Kod");
                    this.OnKodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Kategoriler in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Kategoriler_Kodlar", Storage="_Kategoriler", ThisKey="Kategori", OtherKey="ID", IsForeignKey=true)]
        public Kategoriler Kategoriler
        {
            get
            {
                return this._Kategoriler.Entity;
            }
            set
            {
                Kategoriler previousValue = this._Kategoriler.Entity;
                if ((previousValue != value) || (this._Kategoriler.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Kategoriler.Entity = null;
                        previousValue.Kodlars.Remove(this);
                    }
                    this._Kategoriler.Entity = value;
                    if (value != null)
                    {
                        this._Kategori = value.ID;
                        value.Kodlars.Add(this);
                    }
                    else
                    {
                        this._Kategori = default(int);
                    }
                    this.SendPropertyChanged("Kategoriler");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AltKategori1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="AltKategori_Kodlar", Storage="_AltKategori1", ThisKey="AltKategori", OtherKey="ID", IsForeignKey=true)]
        public AltKategori AltKategori1
        {
            get
            {
                return this._AltKategori1.Entity;
            }
            set
            {
                AltKategori previousValue = this._AltKategori1.Entity;
                if ((previousValue != value) || (this._AltKategori1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._AltKategori1.Entity = null;
                        previousValue.Kodlars.Remove(this);
                    }
                    this._AltKategori1.Entity = value;
                    if (value != null)
                    {
                        this._AltKategori = value.ID;
                        value.Kodlars.Add(this);
                    }
                    else
                    {
                        this._AltKategori = default(int);
                    }
                    this.SendPropertyChanged("AltKategori1");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for MainContext.Ozellikler in the schema.
    /// </summary>
    [Table(Name = @"""main"".Ozellikler")]
    public partial class Ozellikler : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _Ozellik;

        private string _Deger;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnOzellikChanging(string value);
        partial void OnOzellikChanged();
        partial void OnDegerChanging(string value);
        partial void OnDegerChanged();
        #endregion

        public Ozellikler()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ozellik in the schema.
        /// </summary>
        [Column(Storage = "_Ozellik", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ozellik
        {
            get
            {
                return this._Ozellik;
            }
            set
            {
                if (this._Ozellik != value)
                {
                    this.OnOzellikChanging(value);
                    this.SendPropertyChanging();
                    this._Ozellik = value;
                    this.SendPropertyChanged("Ozellik");
                    this.OnOzellikChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Deger in the schema.
        /// </summary>
        [Column(Storage = "_Deger", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Deger
        {
            get
            {
                return this._Deger;
            }
            set
            {
                if (this._Deger != value)
                {
                    this.OnDegerChanging(value);
                    this.SendPropertyChanging();
                    this._Deger = value;
                    this.SendPropertyChanged("Deger");
                    this.OnDegerChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
