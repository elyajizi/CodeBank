//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 4/15/2014 1:42:12 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace MainContext
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class MainDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(MainDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertOzellikler(Ozellikler instance);
        partial void UpdateOzellikler(Ozellikler instance);
        partial void DeleteOzellikler(Ozellikler instance);

        #endregion

        public MainDataContext() :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public MainDataContext(MappingSource mappingSource) :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public MainDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Ozellikler> Ozelliklers
        {
            get
            {
                return this.GetTable<Ozellikler>();
            }
        }
    }
}

namespace MainContext
{

    /// <summary>
    /// There are no comments for MainContext.Ozellikler in the schema.
    /// </summary>
    [Table(Name = @"""main"".Ozellikler")]
    public partial class Ozellikler : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _Ozellik;

        private string _Deger;

        private System.Nullable<System.DateTime> _SonIslemTarihi;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnOzellikChanging(string value);
        partial void OnOzellikChanged();
        partial void OnDegerChanging(string value);
        partial void OnDegerChanged();
        partial void OnSonIslemTarihiChanging(System.Nullable<System.DateTime> value);
        partial void OnSonIslemTarihiChanged();
        #endregion

        public Ozellikler()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ozellik in the schema.
        /// </summary>
        [Column(Storage = "_Ozellik", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ozellik
        {
            get
            {
                return this._Ozellik;
            }
            set
            {
                if (this._Ozellik != value)
                {
                    this.OnOzellikChanging(value);
                    this.SendPropertyChanging();
                    this._Ozellik = value;
                    this.SendPropertyChanged("Ozellik");
                    this.OnOzellikChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Deger in the schema.
        /// </summary>
        [Column(Storage = "_Deger", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Deger
        {
            get
            {
                return this._Deger;
            }
            set
            {
                if (this._Deger != value)
                {
                    this.OnDegerChanging(value);
                    this.SendPropertyChanging();
                    this._Deger = value;
                    this.SendPropertyChanged("Deger");
                    this.OnDegerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SonIslemTarihi in the schema.
        /// </summary>
        [Column(Storage = "_SonIslemTarihi", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> SonIslemTarihi
        {
            get
            {
                return this._SonIslemTarihi;
            }
            set
            {
                if (this._SonIslemTarihi != value)
                {
                    this.OnSonIslemTarihiChanging(value);
                    this.SendPropertyChanging();
                    this._SonIslemTarihi = value;
                    this.SendPropertyChanged("SonIslemTarihi");
                    this.OnSonIslemTarihiChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
